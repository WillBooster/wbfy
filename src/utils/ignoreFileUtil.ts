import fs from 'node:fs';

const userContentHeader = '# Project-specific settings';
const userContentHeaderRegex = /# Project-specific settings[^\n]*\n/gm;
const separator = '# Generated by wbfy';
const separatorPrefix = '# Generated by ';
const defaultHeadUserContent = `${userContentHeader} (head)


${separator}
`;
const defaultTailUserContent = `
${userContentHeader} (tail)
`;

export const ignoreFileUtil = {
  separator,
  separatorPrefix,
  defaultHeadUserContent,
  defaultTailUserContent,
  async readGitignoreWithoutSeparators(filePath: string): Promise<string | undefined> {
    try {
      let content = await fs.promises.readFile(filePath, 'utf8');
      const lastHeaderIndex = getIndexOfTailUserContentHeader(content);
      if (lastHeaderIndex > 0) {
        content = content.slice(0, lastHeaderIndex - 1);
      }
      return (
        content
          .replaceAll(userContentHeaderRegex, '')
          .replaceAll(/# Generated by [^\n]*\n/gm, '')
          .replaceAll(/\r?\n\r?\n(\r?\n)+/gm, '\n\n')
          .trim() + '\n'
      );
    } catch {
      // do nothing
    }
  },
  getHeadUserContent(content: string): string {
    const index = content.indexOf(this.separatorPrefix);
    if (index !== -1) {
      return content
        .slice(0, content.indexOf('\n', index) + 1)
        .replaceAll(userContentHeaderRegex, `${userContentHeader} (head)\n`);
    }
    return defaultHeadUserContent;
  },
  getTailUserContent(content: string): string {
    const lastHeaderIndex = getIndexOfTailUserContentHeader(content);
    if (lastHeaderIndex > 0) {
      return content.slice(lastHeaderIndex - 1);
    }
    return defaultTailUserContent;
  },
  async isBerryZeroInstallEnabled(filePath: string): Promise<boolean> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      return content.includes('\n!.yarn/cache');
    } catch {
      return false;
    }
  },
};

function getIndexOfTailUserContentHeader(content: string): number {
  const index = content.indexOf(userContentHeader);
  const lastIndex = content.lastIndexOf(userContentHeader);
  return lastIndex > index ? lastIndex : -1;
}
