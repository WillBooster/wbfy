import fs from 'node:fs';

const header = '# Project-specific settings';
const separator = '# Generated by wbfy';
const separatorPrefix = '# Generated by ';
const defaultHeadUserContent = `${header} (head)


${separator}
`;
const defaultTailUserContent = `
${header} (tail)
`;

export const IgnoreFileUtil = {
  separator,
  separatorPrefix,
  async readGitignoreWithoutSeparators(filePath: string): Promise<string | undefined> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      return (
        content
          .replace(/# Project-specific settings[^\n]*\n/gm, '')
          .replace(/# Generated by [^\n]*\n/gm, '')
          .replace(/\r?\n\r?\n(\r?\n)+/gm, '\n\n')
          .trim() + '\n'
      );
    } catch {
      // do nothing
    }
  },
  getHeadUserContent(content: string): string {
    const index = content.indexOf(this.separatorPrefix);
    if (index >= 0) {
      return content.slice(0, content.indexOf('\n', index) + 1);
    }
    return defaultHeadUserContent;
  },
  getTailUserContent(content: string): string | undefined {
    const separatorIndex = content.indexOf(this.separatorPrefix);
    const headerIndex = content.lastIndexOf(header);
    if (separatorIndex < headerIndex) {
      return content.slice(headerIndex - 1);
    }
    return defaultTailUserContent;
  },
  async isBerryZeroInstallEnabled(filePath: string): Promise<boolean> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf8');
      return content.includes('\n!.yarn/cache');
    } catch {
      return false;
    }
  },
};
