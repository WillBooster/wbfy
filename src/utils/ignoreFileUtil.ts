import fs from 'fs';

export const IgnoreFileUtil = {
  header: '# Project-specific settings',
  separator: '# Generated by @willbooster/willboosterify',
  separatorPrefix: '# Generated by @willbooster',
  async getExistingContent(filePath: string): Promise<string | null> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf-8');
      return content
        .replace(/# Project-specific settings[^\n]*\n/m, '')
        .replace(/# Generated by[^\n]*\n/m, '')
        .replace(/\r?\n\r?\n(\r?\n)+/gm, '\n\n');
    } catch (_) {
      return null;
    }
  },
  async getUserContent(filePath: string): Promise<string | null> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf-8');
      const index = content.indexOf(this.separatorPrefix);
      if (index >= 0) {
        return content.substring(0, content.indexOf('\n', index) + 1);
      }
    } catch (_) {
      // do nothing
    }
    return null;
  },
  async isBerryZeroInstallEnabled(filePath: string): Promise<boolean> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf-8');
      return content.includes('\n!.yarn/cache');
    } catch (_) {
      return false;
    }
  },
};
